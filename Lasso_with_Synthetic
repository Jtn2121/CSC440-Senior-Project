import pandas as pd
import numpy as np
from pandasql import sqldf
from sklearn import linear_model
import psycopg2

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import Lasso
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from sklearn.model_selection import GridSearchCV

db_name = "postgres"
db_user = "postgres"
db_password = "fireball23"
db_host = "localhost"
db_port = "5432"

rows = []
pysqldf = lambda q: sqldf(q, globals())

with psycopg2.connect(
        database=db_name,
        user=db_user,
        password=db_password,
        host=db_host,
        port=db_port 
    ) as connection:
        with connection.cursor() as cursor:
            cursor.execute("SELECT * FROM tasks2 ")
            syntheticData = cursor.fetchall()
            cursor.execute("SELECT * FROM tasks2 LIMIT 0")
            colNames = [desc[0] for desc in cursor.description] # getting column names from database



rows = []

for row in syntheticData:
    rows.append(row)

dataPD = pd.DataFrame(rows)
dataPD.columns = colNames
getX = pysqldf("SELECT task_id, assignee_id, var1, var2, var3 \
                FROM dataPD")
# print(getX)
getY = pysqldf("SELECT total_time FROM dataPD")

#beginning of lasso model
X_train, X_test, y_train, y_test = train_test_split(getX.values, getY, test_size=0.4,random_state=12)
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.fit_transform(X_test)


lasso = Lasso()
lasso.fit(X_train, y_train)
param_grid = {'alpha' :[0.001, 0.01, 0.1, 1.0]}

lasso_cv = GridSearchCV(lasso, param_grid, cv=3, n_jobs=-1)
lasso_cv.fit(X_train, y_train)

lassoGood = lasso_cv.best_estimator_
lassoGood.fit(X_train, y_train)
#inputs to build the x_new array
taskid = int(input("Enter task ID: (1-7) "))
assignee_id = int(input("Enter assignee ID: (1-5) "))
v1 = int(input("Enter variable 1: (1-30) "))
v2 = int(input("Enter variable 2: (1-5) "))
v3 = int(input("Enter variable 3: (-10 to 10) "))

X_new = np.array([[taskid, assignee_id, v1, v2, v3]]) # assignee_id input to get model prediction
y_pred = lassoGood.predict(X_new) #X_test or X_new for single ouput
print("The prediction with the given inputs is: ", y_pred)
# to use these three below, use X_test for the y_pred
# print('mean', mean_absolute_error(y_test, y_pred))
# print('mean squared', mean_squared_error(y_test, y_pred))
# print('r2', r2_score(y_test, y_pred))
