import psycopg2
import random
import uuid

#database connection information
DB_NAME = "postgres"
DB_USER = "postgres"
DB_PASSWORD = "fireball23" 
DB_HOST = "localhost"
DB_PORT = "5432"

#predefined task names, 
#could also break tasks according to categories so that each catagory will have their own estimated time and total time. Makes it more specific and less generic possibly?
uuid1 = uuid.uuid4()
uuid2 = uuid.uuid4()
uuid3 = uuid.uuid4()
uuid4 = uuid.uuid4()
uuid5 = uuid.uuid4()
uuid6 = uuid.uuid4()
uuid7 = uuid.uuid4()
uuid8 = uuid.uuid4()
uuid9 = uuid.uuid4()
uuid10 = uuid.uuid4()
task_names = [
     ["Check Server Logs", uuid1],
     ["System Update", uuid2],
     ["Code Review", uuid3], 
     ["User Testing", uuid4],
     ["Debugging",uuid5],
     ["Coding", uuid6],
     ["Software maintenance",uuid7],
     ["Data Scrubbing", uuid8],
     ["Analytics Monitoring", uuid9],
     ["Meeting Planning", uuid10]
]

assignee1 = uuid.uuid4()  
assignee2 = uuid.uuid4()    
assignee3 = uuid.uuid4() 
assignee4 = uuid.uuid4() 
assignee5 = uuid.uuid4() 

assignee_ids = [assignee1, assignee2, assignee3, assignee4, assignee5]

template1 = uuid.uuid4()
template2 = uuid.uuid4()
template3 = uuid.uuid4()
template4 = uuid.uuid4()

template_names = [
     [None, 32*"0"],
     ["Sprints", template1],
     ["Orders", template2],
     ["Reports", template3],
     ["Marketing", template4],
]

mini = 1
maxi = 10
assigneeWeight = 1.0
#function to create synthetic data
def generate_synthetic_tasks (n = 100):
    tasks = []
    for i in range(n):
        task = random.choice(task_names)
        task_name = task[0]
        task_id = task[1]
        #task id 
        if task_id == uuid1:
             mini = 1
             maxi = 8
        elif task_id == uuid2:
             mini = 1
             maxi = 12
        elif task_id == uuid3:
             mini = 3
             maxi = 20
        elif task_id == uuid4:
             mini = 3
             maxi = 10
        elif task_id == uuid5:
             mini = 5
             maxi = 35
        elif task_id == uuid6:
             mini = 1
             maxi = 25
        elif task_id == uuid7:
             mini = 3
             maxi = 30
        elif task_id == uuid8:
             mini = 1
             maxi = 12
        elif task_id == uuid9:
             mini = 2
             maxi = 8
        elif task_id == uuid10:
             mini = 5
             maxi = 56
             

        assignee_id = random.choice(assignee_ids) #five different employees
        if assignee_id == assignee1:
            assigneeWeight = 0.65
        elif assignee_id == assignee2:
            assigneeWeight = 1.25
        elif assignee_id == assignee3:
            assigneeWeight = 1.0
        elif assignee_id == assignee4:
            assigneeWeight = 0.85
        elif assignee_id == assignee5:
            assigneeWeight = 1.4
        
        mini *= assigneeWeight
        maxi *= assigneeWeight

        templateChoice = random.choice(template_names)
        template_name = templateChoice[0]
        template_id = templateChoice[1]


        estimated_time = random.uniform(mini,maxi)
        time_total = random.uniform(estimated_time - 10, estimated_time + 10) #sets time total +- 10 of estimated time 
        time_total = max (1, time_total) #makes sure its at least 1
        tasks.append((str(task_id), task_name, time_total, estimated_time, str(assignee_id), template_name, str(template_id)))
    return tasks

try:
        #connect to PostgresSQL
        conn = psycopg2.connect (
             dbname = DB_NAME,
             user = DB_USER,
             password = DB_PASSWORD,
             host = DB_HOST,
             port = DB_PORT
        )
        cursor = conn.cursor()
        print ("Connected to database")

        #Create task table
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS TasksUUID(
                TaskId SERIAL PRIMARY KEY,
                task_id uuid NOT NULL,
                taskname TEXT NOT NULL,
                estimated_time DOUBLE PRECISION NOT NULL,
                total_time DOUBLE PRECISION NOT NULL,
                assignee_id uuid NOT NULL,
                templatename TEXT,
                template_id uuid                                    
            )
        """)
        #Removes rows from table so that you can update it if you have new values
        cursor.execute("TRUNCATE TABLE tasks2 RESTART IDENTITY")
        conn.commit()
        print("Table Tasks2 completed")

        #generate synthetic tasks
        synthetic_tasks = generate_synthetic_tasks(n = 10000)
        cursor.executemany(
             "INSERT INTO TasksUUID (task_id, taskname, estimated_time, total_time, assignee_id, templatename, template_id) VALUES (%s,%s, %s, %s, %s, %s, %s)", synthetic_tasks
        )
        conn.commit()
        print(f" Inserted {len(synthetic_tasks)} synthetic tasks")

except Exception as e:
        print("Error:", e)

finally:
    if 'conn' in locals() and conn:
        cursor.close()
        conn.close()
        print("Connection closed")

            


